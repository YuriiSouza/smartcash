// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  cpf           String?      
  phone         String?
  zipCode       String?
  address       String?
  city          String?
  state         String?
  neighborhood  String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchases Purchase[]
  reviews   Review[]
  productsOwned ProductAccess[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

// Modelo principal para produtos
model Product {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  price          Float
  originalPrice  Float
  discount       Float
  rating         Float
  reviewsCount   Int?
  type           ProductType
  icon           String
  category       Category       @relation(fields: [categoryId], references: [id]) // Relação com Category
  categoryId     String @db.ObjectId // Campo para armazenar o ID da categoria
  tags           ProductTag[] // Relação com ProductTag (tabela de junção para muitos-para-muitos)
  reviews        Review[] // Relação com Review (um produto pode ter muitas avaliações)
  purchaseItems  PurchaseItem[] // Relação com os itens comprados
  isPublished    Boolean
  fileUrl        String

  users ProductAccess[]
}

// Enum para os tipos de produto (mantido)
enum ProductType {
  Ebook
  Planilha
  KitCompleto
}

// Novo modelo para Categorias
model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique // O nome da categoria deve ser único
  products Product[] // Uma categoria pode ter muitos produtos

}

// Novo modelo para Tags
// Usamos uma tabela de junção (ProductTag) para a relação muitos-para-muitos entre Product e Tag
model Tag {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique // O nome da tag deve ser único
  productTags ProductTag[] // Relação com a tabela de junção

}

// Tabela de junção para a relação muitos-para-muitos entre Product e Tag
model ProductTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Adicionado ID único para compatibilidade com MongoDB
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  tagId     String @db.ObjectId
  tag       Tag     @relation(fields: [tagId], references: [id])

}

// Novo modelo para Avaliações (Reviews)
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float // A avaliação em si (ex: de 1 a 5 estrelas)
  comment   String?
  createdAt DateTime @default(now()) // Data e hora da avaliação

  productId String @db.ObjectId // ID do produto que está sendo avaliado
  product   Product @relation(fields: [productId], references: [id]) // Relação com Product

  userId String? @db.ObjectId // O ID do usuário que fez a avaliação (opcional, se permitir avaliações anônimas)
  user   User?   @relation(fields: [userId], references: [id]) // A relação com o modelo User

}

// --- Modelo para Compras/Pedidos (sem UserId) ---
model Purchase {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  customerEmail String // O e-mail do cliente, essencial para enviar o produto
  totalAmount   Float
  mercadoPagoId String          // ID da transação no Mercado Pago (Payment ID ou Preference ID)
  status        String         @default("pending") // "pending", "approved", "failed", "refunded"
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  purchaseItems PurchaseItem[] // Itens que fazem parte desta compra

  userId String? @db.ObjectId // Campo para a chave estrangeira do User (opcional, se permitir guest checkout)
  user   User?   @relation(fields: [userId], references: [id])

}

// --- Modelo para os Itens dentro de uma Compra ---
model PurchaseItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity  Int     @default(1)
  unitPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseId String @db.ObjectId
  purchase   Purchase @relation(fields: [purchaseId], references: [id]) // Relação com a compra

  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id]) // Relação com o produto

}

model NewsletterSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Unique ID for the subscriber
  email     String   @unique // The email, must be unique
  createdAt DateTime @default(now()) // When the subscriber was added
}

model ProductAccess {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  userId String @db.ObjectId // Campo para a chave estrangeira do User (opcional, se permitir guest checkout)
  user   User   @relation(fields: [userId], references: [id])

  productId String @db.ObjectId // Campo para a chave estrangeira do User (opcional, se permitir guest checkout)
  product   Product   @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}
