// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique // O email deve ser único para cada usuário
  cpf           String    @unique // O hash da senha (nunca salve senhas em texto puro!)
  firstName     String? // Nome é opcional ou pode ser coletado depois
  lastName      String? // Sobrenome é opcional
  phone         String?
  zipCode       String?
  address       String?
  city          String?
  state         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean?  @default(false)

  purchases Purchase[]
  reviews   Review[]

  @@map("users") // Nome da tabela no banco de dados
}

// Modelo principal para produtos
model Product {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  price          Float
  originalPrice  Float
  discount       Float
  rating         Float
  reviewsCount   Int            @map("reviews") // Renomeado para evitar conflito com a relação 'reviews'
  type           ProductType
  icon           String
  category       Category       @relation(fields: [categoryId], references: [id]) // Relação com Category
  categoryId     String @db.ObjectId // Campo para armazenar o ID da categoria
  tags           ProductTag[] // Relação com ProductTag (tabela de junção para muitos-para-muitos)
  reviews        Review[] // Relação com Review (um produto pode ter muitas avaliações)
  purchaseItems  PurchaseItem[] // Relação com os itens comprados
  isPublished    Boolean
  fileUrl        String

  @@map("products")
}

// Enum para os tipos de produto (mantido)
enum ProductType {
  Ebook
  Planilha
  KitCompleto
}

// Novo modelo para Categorias
model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique // O nome da categoria deve ser único
  products Product[] // Uma categoria pode ter muitos produtos

  @@map("categories")
}

// Novo modelo para Tags
// Usamos uma tabela de junção (ProductTag) para a relação muitos-para-muitos entre Product e Tag
model Tag {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique // O nome da tag deve ser único
  productTags ProductTag[] // Relação com a tabela de junção

  @@map("tags")
}

// Tabela de junção para a relação muitos-para-muitos entre Product e Tag
model ProductTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Adicionado ID único para compatibilidade com MongoDB
  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  tagId     String @db.ObjectId
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@map("product_tags")
}

// Novo modelo para Avaliações (Reviews)
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float // A avaliação em si (ex: de 1 a 5 estrelas)
  comment   String?
  createdAt DateTime @default(now()) // Data e hora da avaliação

  productId String @db.ObjectId // ID do produto que está sendo avaliado
  product   Product @relation(fields: [productId], references: [id]) // Relação com Product

  userId String? @db.ObjectId // O ID do usuário que fez a avaliação (opcional, se permitir avaliações anônimas)
  user   User?   @relation(fields: [userId], references: [id]) // A relação com o modelo User

  @@map("reviews")
}

// --- Modelo para Compras/Pedidos (sem UserId) ---
model Purchase {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  customerEmail String // O e-mail do cliente, essencial para enviar o produto
  totalAmount   Float
  mercadoPagoId String          // ID da transação no Mercado Pago (Payment ID ou Preference ID)
  status        String         @default("pending") // "pending", "approved", "failed", "refunded"
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  purchaseItems PurchaseItem[] // Itens que fazem parte desta compra

  // Campos para controlar o envio do e-mail
  emailSent   Boolean   @default(false)
  emailSentAt DateTime?

  userId String? @db.ObjectId // Campo para a chave estrangeira do User (opcional, se permitir guest checkout)
  user   User?   @relation(fields: [userId], references: [id])

  @@map("purchases")
}

// --- Modelo para os Itens dentro de uma Compra ---
model PurchaseItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity  Int     @default(1)
  unitPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseId String @db.ObjectId
  purchase   Purchase @relation(fields: [purchaseId], references: [id]) // Relação com a compra

  productId String @db.ObjectId
  product   Product @relation(fields: [productId], references: [id]) // Relação com o produto

  @@map("purchase_items")
}

model NewsletterSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Unique ID for the subscriber
  email     String   @unique // The email, must be unique
  createdAt DateTime @default(now()) // When the subscriber was added

  @@map("newsletter_subscribers")
}
